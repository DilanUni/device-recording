import serial
import time
import os
from datetime import datetime
import threading
from typing import Dict, Optional
from utils.VideoDeviceDetection import VideoDeviceDetection
from recording.VideoDeviceRecorder import VideoDeviceRecorder
from recording.VideoDeviceRecordingController import VideoDeviceRecordingController


class SecuritySystem:
    """
    Sistema integrado de grabaci√≥n de video con sensores Arduino + FFmpeg.

    Este sistema:
    - Escucha el puerto serie del Arduino.
    - Recibe mensajes de activaci√≥n/desactivaci√≥n de sensores (formato "SENSOR:nombre:estado").
    - Inicia o detiene grabaciones de c√°maras usando FFmpeg.
    - Mantiene un estado global de sensores y grabaciones.
    - Permite enviar comandos al Arduino (ej: "activado", "desactivado").

    Par√°metros configurables en la inicializaci√≥n:
    - arduino_port (str): Puerto COM donde est√° conectado Arduino. Ej: "COM3" en Windows o "/dev/ttyUSB0" en Linux.
    - output_dir (str): Directorio base donde se guardar√°n los videos generados.

    Extensiones posibles:
    - Asignar diferentes √≠ndices de c√°mara a cada sensor (en SENSOR_TO_CAMERA).
    - Cambiar el formato del nombre de archivo (ej: a√±adir nombre de c√°mara, fecha m√°s detallada, etc.).
    - Modificar la l√≥gica de cu√°ndo detener grabaciones (ej: por duraci√≥n fija, por comando externo).
    """

    def __init__(self, arduino_port: str = "COM3", output_dir: str = "Videos"):
        """
        inicializa el sistema y establece conexi√≥n con Arduino.

        Args:
            arduino_port (str): Puerto serie a usar (depende de tu SO y c√≥mo se detecta Arduino).
            output_dir (str): Carpeta donde se guardar√°n los videos de salida.
        """
        # Directorio donde se guardar√°n los videos grabados
        self.OUTPUT_DIR = output_dir
        os.makedirs(self.OUTPUT_DIR, exist_ok=True)

        # Mapeo entre sensores y c√°maras f√≠sicas (√≠ndices de OpenCV).
        # Ejemplo: si sensor "entrada" est√° vinculado a la c√°mara con √≠ndice 1, se cambia aqu√≠.
        self.SENSOR_TO_CAMERA = {
            "estacionamiento": 0,
            "entrada": 0,
            "salida": 0,
            "bodega": 0,
        }

        # Diccionario que mantiene el estado actual de cada sensor (None = inactivo a√∫n, "1" = activado, "0" = desactivado)
        self.estado_sensores = {sensor: None for sensor in self.SENSOR_TO_CAMERA}

        # Diccionario con grabaciones activas, indexadas por c√°mara (cada c√°mara puede tener un controller de FFmpeg)
        self.active_controllers: Dict[int, VideoDeviceRecordingController] = {}

        # Abrir puerto serie con Arduino
        # Baud rate 9600 (debe coincidir con el c√≥digo del Arduino).
        self.arduino = serial.Serial(arduino_port, 9600, timeout=1)

        # Peque√±a espera obligatoria para que el microcontrolador arranque
        time.sleep(2)
        print(f"‚úÖ Arduino conectado en {arduino_port}")

        # Detectar qu√© c√°maras existen f√≠sicamente en el sistema
        self._detect_cameras()

    def _detect_cameras(self):
        """
        Detecta c√°maras disponibles usando VideoDeviceDetection.

        - Llama a la clase VideoDeviceDetection que ejecuta FFmpeg en modo lista.
        - Imprime en consola qu√© dispositivos est√°n presentes y qu√© √≠ndices les corresponden.
        - Esto ayuda a configurar SENSOR_TO_CAMERA correctamente.
        """
        has_devices, message = VideoDeviceDetection.has_devices()
        print(f"üé• {message}")

        if has_devices:
            devices = VideoDeviceDetection.get_devices()
            device_map = VideoDeviceDetection.get_device_map()

            print("C√°maras detectadas:")
            for opencv_idx, device_name in device_map:
                print(f"  üìπ √çndice {opencv_idx}: {device_name}")
        else:
            print("‚ö†Ô∏è No se detectaron c√°maras disponibles")

    def _get_device_name_for_index(self, camera_index: int) -> Optional[str]:
        """
        Obtiene el nombre del dispositivo f√≠sico asociado a un √≠ndice de c√°mara OpenCV.

        Args:
            camera_index (int): √çndice (ej: 0, 1, 2...).

        Returns:
            str | None: Nombre del dispositivo ("USB Camera XYZ") o None si no existe.
        """
        device_map = VideoDeviceDetection.get_device_map()
        for opencv_idx, device_name in device_map:
            if opencv_idx == camera_index:
                return device_name
        return None

    def procesar_evento(self, sensor: str, estado: str):
        """
        Procesa un evento recibido desde Arduino.

        Flujo:
        - Si el sensor est√° registrado en SENSOR_TO_CAMERA ‚Üí se obtiene el √≠ndice de c√°mara asociado.
        - Si el estado es "1" (activado) y el sensor no estaba ya en "1" ‚Üí se inicia grabaci√≥n.
        - Si el estado es "0" ‚Üí actualmente no detiene (se podr√≠a ampliar aqu√≠).

        Args:
            sensor (str): Nombre del sensor ("entrada", "salida", etc.).
            estado (str): Estado recibido ("1" = activado, "0" = desactivado).
        """
        if sensor in self.SENSOR_TO_CAMERA:
            cam_index = self.SENSOR_TO_CAMERA[sensor]

            if estado == "1" and self.estado_sensores[sensor] != "1":
                self.estado_sensores[sensor] = "1"
                self._start_camera_recording(sensor, cam_index)

    def _start_camera_recording(self, sensor: str, camera_index: int):
        """
        Lanza la grabaci√≥n de una c√°mara.

        - Revisa si ya existe una grabaci√≥n en esa c√°mara ‚Üí si es as√≠, ignora.
        - Obtiene el nombre del dispositivo f√≠sico asociado al √≠ndice.
        - Crea un archivo .mp4 con timestamp y nombre del sensor.
        - Inicializa VideoDeviceRecorder.
        - Crea un VideoDeviceRecordingController para gestionar esa grabaci√≥n en segundo plano.

        Args:
            sensor (str): Nombre del sensor que activ√≥ la c√°mara.
            camera_index (int): √çndice de c√°mara en OpenCV.
        """
        if camera_index in self.active_controllers:
            print(f"‚ö†Ô∏è C√°mara {camera_index} ya est√° grabando, ignorando nueva activaci√≥n de {sensor}")
            return

        device_name = self._get_device_name_for_index(camera_index)
        if not device_name:
            print(f"‚ùå No se pudo encontrar dispositivo para √≠ndice {camera_index}")
            return

        # Crear nombre de archivo con timestamp
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        filename = f"{sensor}_{timestamp}.mp4"

        try:
            # Inicializa el recorder (configurado para grabar desde el dispositivo)
            recorder = VideoDeviceRecorder(
                video_device=device_name,
                output_filename=filename,
                output_dir=self.OUTPUT_DIR
            )

            # Controller = hilo que mantiene la grabaci√≥n en ejecuci√≥n
            controller = VideoDeviceRecordingController(recorder)
            controller.start()

            # Guardamos la referencia de la c√°mara activa
            self.active_controllers[camera_index] = controller

            output_path = os.path.join(self.OUTPUT_DIR, filename)
            print(f"üé• {sensor} activ√≥ c√°mara {camera_index} ({device_name}) ‚Üí {output_path}")

        except Exception as e:
            print(f"‚ùå Error iniciando grabaci√≥n para {sensor}: {e}")
            self.estado_sensores[sensor] = None

    def stop_camera_recording(self, camera_index: int):
        """
        Detiene la grabaci√≥n de una c√°mara espec√≠fica.

        Args:
            camera_index (int): √çndice de c√°mara a detener.
        """
        if camera_index in self.active_controllers:
            try:
                controller = self.active_controllers[camera_index]
                controller.stop()  # Finaliza FFmpeg
                del self.active_controllers[camera_index]
                print(f"üõë C√°mara {camera_index} detenida")
            except Exception as e:
                print(f"‚ùå Error deteniendo c√°mara {camera_index}: {e}")

    def stop_all_recordings(self):
        """
        Detiene todas las grabaciones que est√°n activas en el sistema.

        - Recorre active_controllers y detiene cada una.
        - Marca todos los sensores como "0".
        """
        print("üõë Deteniendo todas las grabaciones...")
        for camera_index in list(self.active_controllers.keys()):
            self.stop_camera_recording(camera_index)

        for sensor in self.estado_sensores:
            self.estado_sensores[sensor] = "0"

        print("‚úÖ Todas las grabaciones detenidas")

    def escuchar_arduino(self):
        """
        Bucle principal que escucha continuamente datos del puerto serie.

        Flujo:
        - Revisa si hay datos en el buffer serial (arduino.in_waiting).
        - Lee l√≠nea por l√≠nea, las decodifica a UTF-8.
        - Si empieza con "SENSOR:" ‚Üí intenta separar en formato SENSOR:nombre:estado.
        - Llama a procesar_evento(sensor, estado).
        - Hace una peque√±a pausa (0.01s) para no saturar la CPU.
        """
        while True:
            try:
                while self.arduino.in_waiting > 0:
                    linea = self.arduino.readline().decode("utf-8").strip()
                    if linea.startswith("SENSOR:"):
                        try:
                            _, sensor, estado = linea.split(":")
                            self.procesar_evento(sensor, estado)
                        except ValueError:
                            print(f"‚ö†Ô∏è L√≠nea malformada: {linea}")
                time.sleep(0.01)
            except Exception as e:
                print(f"‚ùå Error leyendo Arduino: {e}")
                break

    def enviar_a_arduino(self, msg: str):
        """
        Env√≠a un mensaje al Arduino por el puerto serie.

        Args:
            msg (str): Texto a enviar. Ej: "activado" o "desactivado".

        Nota:
        - Debe coincidir con los comandos que reconoce el sketch de Arduino.
        - Se le a√±ade autom√°ticamente un salto de l√≠nea al final.
        """
        try:
            self.arduino.write((msg + "\n").encode("utf-8"))
            print(f"‚û°Ô∏è Enviado a Arduino: {msg}")
        except Exception as e:
            print(f"‚ùå Error enviando a Arduino: {e}")

    def get_status_report(self) -> str:
        """
        Genera un reporte del estado actual del sistema.

        Incluye:
        - Cantidad de grabaciones activas.
        - Estado de cada sensor (si est√° grabando o no).

        Returns:
            str: Texto formateado con informaci√≥n.
        """
        report = "\nüìä ESTADO DEL SISTEMA:\n"
        report += f"   Grabaciones activas: {len(self.active_controllers)}\n"

        for sensor, estado in self.estado_sensores.items():
            cam_idx = self.SENSOR_TO_CAMERA[sensor]
            status = "üî¥ GRABANDO" if cam_idx in self.active_controllers else "‚ö™ INACTIVO"
            report += f"   {sensor} (c√°m {cam_idx}): {status}\n"

        return report

    def close(self):
        """
        Limpia recursos del sistema antes de cerrar.

        - Detiene todas las grabaciones.
        - Cierra conexi√≥n con Arduino.
        """
        self.stop_all_recordings()
        if hasattr(self, 'arduino'):
            self.arduino.close()
            print("‚úÖ Arduino desconectado")


def main():
    """
    Funci√≥n principal que lanza el sistema de monitoreo y grabaci√≥n.

    Flujo:
    1. Inicializa SecuritySystem.
    2. Muestra estado inicial.
    3. Lanza un hilo secundario que escucha continuamente al Arduino.
    4. Mantiene un bucle de comandos en la consola:

       Comandos soportados:
       - "activado" ‚Üí env√≠a mensaje al Arduino para habilitar sensores.
       - "desactivado" ‚Üí env√≠a mensaje al Arduino y detiene grabaciones.
       - "status" ‚Üí imprime el estado actual.
       - "quit" ‚Üí termina el programa.

    """
    system = SecuritySystem(arduino_port="COM3", output_dir="Videos")

    print(system.get_status_report())

    # Hilo separado para escuchar Arduino en paralelo al input()
    arduino_thread = threading.Thread(target=system.escuchar_arduino, daemon=True)
    arduino_thread.start()

    print("\nüéß Escuchando Arduino en tiempo real...")
    print("üí° Comandos disponibles:")
    print("   ‚Ä¢ 'activado' - Habilitar sistema de sensores")
    print("   ‚Ä¢ 'desactivado' - Deshabilitar y detener todas las grabaciones")
    print("   ‚Ä¢ 'status' - Mostrar estado actual")
    print("   ‚Ä¢ 'quit' - Salir del programa")
    print("-" * 60)

    try:
        while True:
            cmd = input("Comando ‚Üí ").strip().lower()

            if cmd == "quit":
                break
            elif cmd == "status":
                print(system.get_status_report())
            elif cmd in ["activado", "desactivado"]:
                system.enviar_a_arduino(cmd)
                if cmd == "desactivado":
                    system.stop_all_recordings()
            else:
                print("‚ö†Ô∏è Comando no reconocido. Use: activado, desactivado, status, quit")

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Programa interrumpido por usuario")
    finally:
        print("üßπ Cerrando sistema...")
        system.close()
        print("‚úÖ Sistema cerrado correctamente")


if __name__ == "__main__":
    main()
