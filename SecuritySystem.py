import serial
import time
import os
import cv2 as cv
import json
from datetime import datetime
import threading
from typing import Dict, Optional, List, Tuple
from utils.VideoDeviceDetection import VideoDeviceDetection
from recording.RecordingManager import RecordingManager


class CameraConfigManager:
    """
    Gestiona la configuraci√≥n de asignaci√≥n de c√°maras a zonas.
    """
    
    def __init__(self, config_file: str = "camera_config.json"):
        self.config_file = config_file
        self.zones = ["ENTRADA", "SALIDA", "ESTACIONAMIENTO", "BODEGA"]
    
    def load_config(self) -> Optional[Dict[str, int]]:
        """
        Carga la configuraci√≥n desde el archivo JSON.
        Retorna None si no existe o es inv√°lida.
        """
        if not os.path.exists(self.config_file):
            return None
        
        try:
            with open(self.config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            # Validar estructura
            if not isinstance(config, dict) or 'sensor_to_camera' not in config:
                print("‚ö†Ô∏è Archivo de configuraci√≥n inv√°lido")
                return None
            
            sensor_to_camera = config['sensor_to_camera']
            
            # Validar que todas las zonas est√©n presentes
            if not all(zone in sensor_to_camera for zone in self.zones):
                print("‚ö†Ô∏è Configuraci√≥n incompleta - faltan zonas")
                return None
            
            return sensor_to_camera
        
        except Exception as e:
            print(f"‚ùå Error cargando configuraci√≥n: {e}")
            return None
    
    def save_config(self, sensor_to_camera: Dict[str, int], device_map: List[Tuple[int, str]]) -> bool:
        """
        Guarda la configuraci√≥n en el archivo JSON.
        """
        try:
            # Crear estructura completa con metadata
            config = {
                "sensor_to_camera": sensor_to_camera,
                "metadata": {
                    "created_at": datetime.now().isoformat(),
                    "available_devices": [
                        {"index": idx, "name": name} for idx, name in device_map
                    ]
                }
            }
            
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ Configuraci√≥n guardada en {self.config_file}")
            return True
        
        except Exception as e:
            print(f"‚ùå Error guardando configuraci√≥n: {e}")
            return False
    
    def validate_config_with_devices(self, sensor_to_camera: Dict[str, int], 
                                    device_map: List[Tuple[int, str]]) -> bool:
        """
        Valida que la configuraci√≥n sea compatible con los dispositivos actuales.
        """
        available_indices = {idx for idx, _ in device_map}
        configured_indices = set(sensor_to_camera.values())
        
        # Verificar que todos los √≠ndices configurados existan
        missing_indices = configured_indices - available_indices
        
        if missing_indices:
            print(f"‚ö†Ô∏è C√°maras configuradas no disponibles: {missing_indices}")
            return False
        
        return True
    
    def assign_cameras_interactive(self, device_map: List[Tuple[int, str]]) -> Dict[str, int]:
        """
        Permite al usuario asignar c√°maras a zonas de forma interactiva.
        """
        if not device_map:
            print("‚ùå No hay c√°maras disponibles")
            return {}
        
        print("\n" + "="*60)
        print("üé• CONFIGURACI√ìN DE C√ÅMARAS POR ZONA")
        print("="*60)
        print("\nC√°maras detectadas:")
        for idx, name in device_map:
            print(f"  [{idx}] {name}")
        
        sensor_to_camera: Dict[str, int] = {}
        available_indices = {idx for idx, _ in device_map}
        
        print("\nüí° Asigne una c√°mara a cada zona:")
        print("   (Puede usar el mismo √≠ndice para m√∫ltiples zonas)\n")
        
        for zone in self.zones:
            while True:
                try:
                    user_input = input(f"  {zone} ‚Üí √çndice de c√°mara: ").strip()
                    
                    if not user_input:
                        print("     ‚ö†Ô∏è Debe ingresar un valor")
                        continue
                    
                    cam_idx = int(user_input)
                    
                    if cam_idx not in available_indices:
                        print(f"     ‚ö†Ô∏è √çndice inv√°lido. Use: {sorted(available_indices)}")
                        continue
                    
                    sensor_to_camera[zone] = cam_idx
                    cam_name = next(name for idx, name in device_map if idx == cam_idx)
                    print(f"     ‚úì {zone} asignado a c√°mara {cam_idx} ({cam_name})")
                    break
                
                except ValueError:
                    print("     ‚ö†Ô∏è Debe ingresar un n√∫mero v√°lido")
                except KeyboardInterrupt:
                    print("\n\n‚èπÔ∏è Configuraci√≥n cancelada")
                    return {}
        
        # Resumen final
        print("\n" + "="*60)
        print("üìã RESUMEN DE ASIGNACI√ìN:")
        print("="*60)
        for zone, cam_idx in sensor_to_camera.items():
            cam_name = next(name for idx, name in device_map if idx == cam_idx)
            print(f"  {zone:20} ‚Üí [{cam_idx}] {cam_name}")
        print("="*60 + "\n")
        
        return sensor_to_camera


class SecuritySystem:
    """
    Sistema integrado de grabaci√≥n de video con sensores Arduino + RecordingManager.
    """

    def __init__(self, arduino_port: str = "COM3", output_dir: str = "Videos", 
                 config_file: str = "camera_config.json"):
        self.OUTPUT_DIR = output_dir
        os.makedirs(self.OUTPUT_DIR, exist_ok=True)

        # Gestor de configuraci√≥n
        self.config_manager = CameraConfigManager(config_file)
        
        # Asignaci√≥n de c√°maras a sensores (se cargar√° o configurar√°)
        self.SENSOR_TO_CAMERA: Dict[str, int] = {}

        # Estado de grabaci√≥n por sensor
        self.estado_sensores: Dict[str, bool] = {}

        # Capturas de video activas por sensor
        self.active_captures: Dict[str, cv.VideoCapture] = {}

        # Recording Manager
        self.recording_manager = RecordingManager(
            output_dir=self.OUTPUT_DIR,
            fps=30.0
        )

        # Hilos de captura por sensor
        self.capture_threads: Dict[str, threading.Thread] = {}
        self.should_stop_capture: Dict[str, bool] = {}

        # Detectar c√°maras y configurar
        device_map = self._detect_cameras()
        self._setup_camera_config(device_map)
        
        # Inicializar estado de sensores
        self.estado_sensores = {sensor: False for sensor in self.SENSOR_TO_CAMERA}

        # Conexi√≥n al Arduino
        self.arduino = serial.Serial(arduino_port, 9600, timeout=1)
        time.sleep(2)
        print(f"‚úÖ Arduino conectado en {arduino_port}")

    def _detect_cameras(self) -> List[Tuple[int, str]]:
        """Detecta c√°maras disponibles usando VideoDeviceDetection."""
        has_devices, message = VideoDeviceDetection.has_devices()
        print(f"\nüé• {message}")

        device_map = []
        if has_devices:
            device_map = VideoDeviceDetection.get_device_map()
            print("C√°maras detectadas:")
            for opencv_idx, device_name in device_map:
                print(f"  üìπ [{opencv_idx}] {device_name}")
        else:
            print("‚ö†Ô∏è No se detectaron c√°maras disponibles")
        
        return device_map
    
    def _setup_camera_config(self, device_map: List[Tuple[int, str]]) -> None:
        """
        Configura la asignaci√≥n de c√°maras a zonas.
        Intenta cargar desde JSON, si no es v√°lido, solicita configuraci√≥n interactiva.
        """
        if not device_map:
            print("‚ùå No se pueden configurar c√°maras sin dispositivos disponibles")
            self.SENSOR_TO_CAMERA = {}
            return
        
        # Intentar cargar configuraci√≥n existente
        loaded_config = self.config_manager.load_config()
        
        if loaded_config:
            print(f"\nüìÑ Configuraci√≥n encontrada en {self.config_manager.config_file}")
            
            # Validar que la configuraci√≥n sea compatible con dispositivos actuales
            if self.config_manager.validate_config_with_devices(loaded_config, device_map):
                self.SENSOR_TO_CAMERA = loaded_config
                print("‚úÖ Configuraci√≥n cargada y validada correctamente\n")
                self._print_current_config(device_map)
                return
            else:
                print("‚ö†Ô∏è La configuraci√≥n no es compatible con los dispositivos actuales")
                print("   Se requiere reconfiguraci√≥n\n")
        else:
            print("\nüìù No se encontr√≥ configuraci√≥n previa\n")
        
        # Solicitar configuraci√≥n interactiva
        while True:
            print("¬øDesea configurar las c√°maras ahora? (s/n): ", end="")
            response = input().strip().lower()
            
            if response == 's':
                new_config = self.config_manager.assign_cameras_interactive(device_map)
                
                if new_config:
                    self.SENSOR_TO_CAMERA = new_config
                    
                    # Guardar configuraci√≥n
                    print("¬øDesea guardar esta configuraci√≥n? (s/n): ", end="")
                    save_response = input().strip().lower()
                    
                    if save_response == 's':
                        self.config_manager.save_config(new_config, device_map)
                    
                    return
                else:
                    print("‚ö†Ô∏è Configuraci√≥n vac√≠a o cancelada")
            
            elif response == 'n':
                print("‚ö†Ô∏è Sistema sin configuraci√≥n - no podr√° grabar")
                self.SENSOR_TO_CAMERA = {}
                return
            
            else:
                print("‚ö†Ô∏è Respuesta inv√°lida. Use 's' o 'n'")
    
    def _print_current_config(self, device_map: List[Tuple[int, str]]) -> None:
        """Imprime la configuraci√≥n actual de c√°maras."""
        print("üìã Configuraci√≥n actual:")
        for zone, cam_idx in self.SENSOR_TO_CAMERA.items():
            cam_name = next((name for idx, name in device_map if idx == cam_idx), "Desconocida")
            print(f"   {zone:20} ‚Üí [{cam_idx}] {cam_name}")
        print()

    def _get_device_name_for_index(self, camera_index: int) -> Optional[str]:
        """Obtiene el nombre f√≠sico de la c√°mara seg√∫n su √≠ndice OpenCV."""
        device_map = VideoDeviceDetection.get_device_map()
        for opencv_idx, device_name in device_map:
            if opencv_idx == camera_index:
                return device_name
        return None

    def _parse_alert_message(self, message: str) -> Optional[str]:
        """
        Extrae el sensor que activ√≥ la alerta desde el mensaje del Arduino.
        """
        message_upper = message.upper()
        if "ENTRADA" in message_upper:
            return "ENTRADA"
        elif "SALIDA" in message_upper:
            return "SALIDA"
        elif "ESTACIONAMIENTO" in message_upper:
            return "ESTACIONAMIENTO"
        elif "BODEGA" in message_upper:
            return "BODEGA"
        return None

    def _capture_and_record(self, sensor: str, camera_index: int):
        """
        Hilo que captura frames y los escribe usando RecordingManager.
        """
        cap = cv.VideoCapture(camera_index)
        
        if not cap.isOpened():
            print(f"‚ùå No se pudo abrir c√°mara {camera_index} para {sensor}")
            return

        self.active_captures[sensor] = cap
        
        # Leer primer frame para iniciar grabaci√≥n
        ret, frame = cap.read()
        if not ret:
            print(f"‚ùå No se pudo leer frame inicial para {sensor}")
            cap.release()
            return

        # Iniciar grabaci√≥n con RecordingManager
        if not self.recording_manager.start_recording(sensor, frame, "camera"):
            print(f"‚ùå No se pudo iniciar grabaci√≥n para {sensor}")
            cap.release()
            return

        print(f"‚úÖ Captura y grabaci√≥n iniciada para {sensor}")

        # Loop de captura
        while not self.should_stop_capture.get(sensor, False):
            ret, frame = cap.read()
            if not ret:
                print(f"‚ö†Ô∏è Error leyendo frame de {sensor}")
                time.sleep(0.1)
                continue

            # Escribir frame con RecordingManager
            self.recording_manager.write_frame(sensor, frame)
            
            time.sleep(0.01)  # ~100 FPS max

        # Cleanup
        cap.release()
        if sensor in self.active_captures:
            del self.active_captures[sensor]
        
        print(f"üõë Captura finalizada para {sensor}")

    def _start_camera_recording(self, sensor: str, camera_index: int):
        """
        Inicia grabaci√≥n de video para un sensor espec√≠fico.
        """
        # Verificar si este sensor ya est√° grabando
        if sensor in self.capture_threads and self.capture_threads[sensor].is_alive():
            print(f"‚ö†Ô∏è Sensor {sensor} ya tiene una grabaci√≥n activa")
            return

        device_name = self._get_device_name_for_index(camera_index)
        if not device_name:
            print(f"‚ùå No se encontr√≥ dispositivo para √≠ndice {camera_index}")
            return

        try:
            print(f"üé¨ Iniciando grabaci√≥n para {sensor}...")
            
            # Flag para detener captura
            self.should_stop_capture[sensor] = False
            
            # Iniciar hilo de captura
            thread = threading.Thread(
                target=self._capture_and_record,
                args=(sensor, camera_index),
                daemon=True
            )
            thread.start()
            
            self.capture_threads[sensor] = thread
            self.estado_sensores[sensor] = True

            print(f"‚úÖ {sensor} activ√≥ c√°mara {camera_index} ({device_name})")
            print(f"üìÅ Guardando en: {self.OUTPUT_DIR}")

        except Exception as e:
            print(f"‚ùå Error iniciando grabaci√≥n para {sensor}: {e}")
            import traceback
            traceback.print_exc()

    def stop_all_recordings(self):
        """
        Detiene todas las grabaciones activas.
        """
        if not self.capture_threads:
            print("‚ÑπÔ∏è No hay grabaciones activas para detener")
            return
            
        print("üõë Deteniendo todas las grabaciones...")
        
        # Se√±alar a todos los hilos que deben detenerse
        for sensor in list(self.capture_threads.keys()):
            self.should_stop_capture[sensor] = True
        
        # Esperar a que terminen (timeout de 2 segundos por hilo)
        for sensor, thread in list(self.capture_threads.items()):
            try:
                thread.join(timeout=2.0)
                self.estado_sensores[sensor] = False
            except Exception as e:
                print(f"‚ùå Error esperando hilo de {sensor}: {e}")
        
        # Detener grabaciones en RecordingManager
        self.recording_manager.stop_all()
        
        # Limpiar estructuras
        self.capture_threads.clear()
        self.should_stop_capture.clear()
        
        # Liberar capturas restantes
        for sensor, cap in list(self.active_captures.items()):
            try:
                cap.release()
            except:
                pass
        self.active_captures.clear()

        print("‚úÖ Todas las grabaciones detenidas")

    def escuchar_arduino(self):
        """
        Escucha continuamente los mensajes enviados por el Arduino.
        """
        print("üëÇ Iniciando escucha de Arduino...")
        
        while True:
            try:
                if self.arduino.in_waiting > 0:
                    linea = self.arduino.readline().decode("utf-8", errors='ignore').strip()
                    
                    if linea:
                        print(f"üì® Arduino: {linea}")

                        # Mensaje de alerta de sensor
                        if "ALERTA:" in linea:
                            sensor = self._parse_alert_message(linea)
                            if sensor and sensor in self.SENSOR_TO_CAMERA:
                                camera_index = self.SENSOR_TO_CAMERA[sensor]
                                print(f"üö® Alerta detectada: {sensor} ‚Üí C√°mara {camera_index}")
                                self._start_camera_recording(sensor, camera_index)
                            else:
                                print(f"‚ö†Ô∏è Sensor no reconocido o no configurado: {linea}")

                        # Mensaje de desactivaci√≥n
                        elif "alarmaActiva=0" in linea or "DESACTIVADO" in linea:
                            print("üî¥ Desactivaci√≥n detectada")
                            self.stop_all_recordings()
                
                time.sleep(0.01)
                
            except serial.SerialException as e:
                print(f"‚ùå Error de conexi√≥n serial: {e}")
                break
            except Exception as e:
                print(f"‚ùå Error leyendo Arduino: {e}")
                import traceback
                traceback.print_exc()

    def enviar_a_arduino(self, comando: str):
        """
        Env√≠a comando al Arduino.
        """
        try:
            self.arduino.write((comando + "\n").encode("utf-8"))
            print(f"‚û°Ô∏è Enviado a Arduino: {comando}")
            time.sleep(0.1)
        except Exception as e:
            print(f"‚ùå Error enviando comando: {e}")

    def get_status_report(self) -> str:
        """
        Devuelve un reporte legible del estado actual del sistema.
        """
        report = "\nüìä ESTADO DEL SISTEMA:\n"
        active_recordings = self.recording_manager.get_recording_count()
        report += f"   Grabaciones activas: {active_recordings}\n"

        for sensor, grabando in self.estado_sensores.items():
            cam_idx = self.SENSOR_TO_CAMERA.get(sensor, -1)
            status = "üî¥ GRABANDO" if grabando else "‚ö™ INACTIVO"
            report += f"   {sensor} (c√°m {cam_idx}): {status}\n"

        return report

    def close(self):
        """Detiene todas las grabaciones y cierra el Arduino."""
        print("üßπ Cerrando sistema...")
        self.stop_all_recordings()
        if hasattr(self, 'arduino') and self.arduino.is_open:
            self.arduino.close()
            print("‚úÖ Arduino desconectado")


def main():
    """
    Funci√≥n principal que inicia el sistema de monitoreo.
    """
    print("="*60)
    print("üîí SISTEMA DE SEGURIDAD CON ARDUINO")
    print("="*60)
    
    system = SecuritySystem(arduino_port="COM3", output_dir="Videos")
    
    if not system.SENSOR_TO_CAMERA:
        print("\n‚ùå Sistema sin configuraci√≥n de c√°maras. Saliendo...")
        return
    
    print(system.get_status_report())

    # Hilo para escuchar Arduino
    arduino_thread = threading.Thread(target=system.escuchar_arduino, daemon=True)
    arduino_thread.start()

    print("\nüéß Escuchando Arduino en tiempo real...")
    print("üí° Comandos disponibles:")
    print("   ‚Ä¢ 'activacion' - Habilitar sistema de sensores")
    print("   ‚Ä¢ 'desactivacion' - Deshabilitar y detener grabaciones")
    print("   ‚Ä¢ 'status' - Mostrar estado actual")
    print("   ‚Ä¢ 'quit' - Salir del programa")
    print("-" * 60)

    try:
        while True:
            cmd = input("Comando ‚Üí ").strip().lower()

            if cmd == "quit":
                break
            elif cmd == "status":
                print(system.get_status_report())
            elif cmd in ["activado", "desactivado"]:
                system.enviar_a_arduino(cmd)
                if cmd == "desactivado":
                    system.stop_all_recordings()
            else:
                print("‚ö†Ô∏è Comando no reconocido. Use: activacion, desactivacion, status, quit")

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Programa interrumpido por usuario")
    finally:
        system.close()
        print("‚úÖ Sistema cerrado correctamente")


if __name__ == "__main__":
    main()